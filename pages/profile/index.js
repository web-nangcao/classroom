import Head from "next/head";
import Image from "next/image";

import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Alert from "@mui/material/Alert";

import styles from "../../styles/Home.module.css";

import Layout from "../../components/layout";

import TopBar from "../../components/topbar/topBar";
import MenuBar from "../../components/menuBar/menubar";

import profileStyle from "../../styles/profile.module.css";

import React, { useState, useEffect } from "react";
import { Controller, useForm } from "react-hook-form";

import Cookie from "js-cookie";

import axios from "axios";

const axiosApiCall = (url, method, headers = {}, data) =>
  axios({
    method,
    url: `${process.env.NEXT_PUBLIC_API_BASE_URL}${url}`,
    data: data,
    headers: headers,
  });

export default function ProfilePage() {
  const { register, handleSubmit, reset, control } = useForm();

  const [user, setUser] = useState(
    Cookie.get("user") !== undefined
      ? (user = JSON.parse(Cookie.get("user")))
      : {}
  );
  const [updating, setUpdating] = useState(false);
  const [success, setSuccess] = useState(false);

  const onSubmit = (data) => {
    setUpdating(true);
    const access_token = "Bearer " + Cookie.get("accesstoken");
    const headers = { authorization: access_token };

    const profile = { name: data.txtName, code: data.txtCode };

    axiosApiCall("user/account/manage-profile", "post", headers, profile)
      .then((res) => {
        setUpdating(false);
        setSuccess(true);
        console.log("response:");
        console.log(res.data.resValue);
        setUser(res.data.resValue.user);
        Cookie.set("user", JSON.stringify(res.data.resValue.user));
      })
      .catch(function (error) {
        if (error.response) {
          console.log(error.response.data);
          console.log(error.response.status);
          console.log(error.response.headers);
        }
      });
  };

  useEffect(() => {
    console.log(user);
  });

  return (
    <Layout>
      <>
        <Head>
          <title> Thông Tin Tài Khoản </title>{" "}
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>{" "}
        <TopBar> </TopBar>
        <div className={profileStyle.container}>
          <h1 className={profileStyle.accountProfile}> Account Profile </h1>
          <div className={profileStyle.imageWrapper}>
            <Image
              src="/images/teacher.jpg" // Route of the image file
              height={200} // Desired size with correct aspect ratio
              width={200} // Desired size with correct aspect ratio
              alt="Avatar"
              className={profileStyle.image}
            />
          </div>
          <form>
            <Controller
              name={"textValue"}
              control={control}
              render={({ field: { onChange, value } }) => (
                <>
                  <div className={profileStyle.textFieldWrapper}>
                    <b>Nhập Tên Của Bạn:</b>
                    <TextField
                      required
                      id="outlined-required"
                      defaultValue={user.name}
                      onChange={onChange}
                      className={profileStyle.textField}
                      {...register("txtName")}
                    />
                    <br></br>
                  </div>
                  <div className={profileStyle.textFieldWrapper}>
                    <b>Nhập mã của bạn:</b>
                    <TextField
                      required
                      id="outlined-required"
                      defaultValue={user.code}
                      onChange={onChange}
                      className={profileStyle.textField}
                      {...register("txtCode")}
                    />
                    <br></br>
                  </div>

                  <div className={profileStyle.textFieldWrapper}>
                    <b>Email: </b>
                    <TextField
                      required
                      id="outlined-required"
                      defaultValue={user.email}
                      className={profileStyle.textField}
                      InputProps={{
                        readOnly: true,
                      }}
                    />
                    <br></br>{" "}
                    {/* <TextField
                      required
                      id="outlined-required"
                      label="Discription:"
                      defaultValue=""
                      disabled
                      onChange={onChange}
                      className={profileStyle.textField}
                    />
                    <br></br>
                  </div>

                  <div className={profileStyle.textFieldWrapper}>
                    <TextField
                      required
                      id="outlined-required"
                      disabled
                      label="Room:"
                      defaultValue=""
                      onChange={onChange}
                      className={profileStyle.textField}
                    />
                    <br></br> */}
                  </div>
                </>
              )}
            />
            <div className={profileStyle.buttonWrapper}>
              <Button
                onClick={handleSubmit(onSubmit)}
                className={profileStyle.button}
                variant="contained"
              >
                Submit
              </Button>
            </div>
          </form>

          {updating ? (
            <Alert
              severity="info"
              className={profileStyle.alert}
              variant="filled"
            >
              Waiting for updating your profile!
            </Alert>
          ) : (
            <></>
          )}
          {success ? (
            <Alert
              severity="success"
              className={profileStyle.alert}
              variant="filled"
            >
              Update your profile successfully!
            </Alert>
          ) : (
            <></>
          )}
        </div>{" "}
      </>{" "}
    </Layout>
  );
}
